security:
    password_hashers:
        App\Entity\Utilisateur: 'auto' # Assure-toi que le bon nom d'entit√© est utilis√©

    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email  # Utilise "username" si c'est le cas dans ton entit√©

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\UtilisateurAuthenticator
            custom_authenticator: 
                - App\Security\UtilisateurAuthenticator
            form_login:
                login_path: app_login
                check_path: app_login
               # default_target_path: app_userprofile
            logout:
                path: app_logout
                target: app_login
            



            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                    # by default, the feature is enabled by checking a checkbox in the
                    # login form, uncomment the following line to always enable it.
                    #always_remember_me: true

    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }  # üîπ Acc√®s r√©serv√© aux utilisateurs connect√©s

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
